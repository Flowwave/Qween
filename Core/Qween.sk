#
# Qween!
#  made by flowwave
#  please do not claim ownership of Qween
#  

on load:
    delete {PackageName::*}
    AddPackage("AdminWand")
    AddPackage("BasicParticles")
    AddPackage("FunctionSet")
    AddPackage("ItemMatic")
    AddPackage("Offgrid")
    AddPackage("RainbowUtils")
    AddPackage("SilkyMenus")
    AddPackage("TreeGen")
    AddPackage("VarManager")
    AddPackage("FileCord")
    AddPackage("FileCordVixio")
    AddPackage("FileCordLocal")
    AddPackage("BlueStoneX")
    AddPackage("EasyClicks")
    
    
    AddPackage("BetterErrors")
    
    #command "Qween-Update"
    
function AddPackage(name:string):
    set {PackageName::%{_name}%} to {_name}

command /eval [<string>]:
    permission: admin
    trigger:
        evaluate arg 1
command /package-list [<string>]:
    permission: admin
    trigger:
        QweenSend(player,"These are your installed packages:")
        loop files in dir "plugins/Skript/scripts/Packages":
            set {_x::*} to loop-value split at "/"
            set {_str} to last element of {_x::*}
            replace all ".sk" with "" in {_str}
            set {_pack} to {_str}
            delete {_x::*}
            send formatted "<tooltip:Click to Update><suggest command:/package-install %{_pack}%>&e[↑] <tooltip:Click to Uninstall><suggest command:/package-uninstall %{_pack}%>&c[❌] <reset>&d %{_pack}%"

            
command /package-uninstall [<string>]:
    permission: admin 
    trigger:
        set {_pack} to {PackageName::%arg 1%} ? arg 1
        if file "plugins/Skript/scripts/Packages/%{_pack}%.sk" does not exist:
            QweenSend(player,"You do not have that package installed, So it couldn't be removed!")
        else:
            QweenSend(player,"Uninstalling %{_pack}%...")
            unload script file "Packages/%{_pack}%.sk"

            delete file "plugins/Skript/scripts/Packages/-%{_pack}%.sk"
            
            QweenSend(player,"Uninstalled %{_pack}%!")
            delete {packagebyte::%{_pack}%}
        

command /package-install [<string>]:
    permission: admin 
    trigger:
        QweenSend(player, "Finding package...")
        set {_pack} to {PackageName::%arg 1%} ? arg 1
        set {_link} to "https://raw.githubusercontent.com/Flowwave/Qween/main/Packages/%{_pack}%.sk"
        set {_x} to response code of url {_link}
        if {_x} is not 200:
            QweenSend(player, "Could not find package! It either doesn't exists, or you made a typo...")
            stop
        
        set {_byte} to size of url {_link} in bytes
        
        if {packagebyte::%{_pack}%} is {_byte}:
            if {packageInstallWarn} is not set:
                QweenSend(player,"You are already running the latest release of %{_pack}%! If you want to reinstall it anyway run the command again within 5 seconds")
                set {packageInstallWarn} to now
                stop

            if difference between now and {packageInstallWarn} is more than 5 seconds:
                QweenSend(player,"You are already running the latest release of %{_pack}%! If you want to reinstall it anyway run the command again within 5 seconds")
                set {packageInstallWarn} to now
                stop
        
        if dir "plugins/Skript/scripts/Packages" does not exist:
            create dir "plugins/Skript/scripts/Packages"
        else:
            if file "plugins/Skript/scripts/Packages/%{_pack}%.sk" exists:
                QweenSend(player,"Updating %{_pack}%...")
                delete file "plugins/Skript/scripts/Packages/%{_pack}%.sk"
            else:
                QweenSend(player,"Installing %{_pack}%...")
        download file from {_link} to file "plugins/Skript/scripts/Packages/%{_pack}%.sk"
        set {packagebyte::%{_pack}%} to {_byte}
        
        reload script "Packages/%{_pack}%"
        QweenSend(player, "Finished installing %{_pack}%.sk")
        
command /qween-update [<string>]:
    permission: admin 
    trigger:
        set {_link} to "https://raw.githubusercontent.com/Flowwave/Qween/main/Core/Qween.sk"
        
        set {_x} to response code of url {_link}
        if {_x} is not 200:
            QweenSend(player, "Could not update Qween, Please try again later")
            stop
        
        set {_byte} to size of url {_link} in bytes
        
        if {qweenbyte} is {_byte}:
            QweenSend(player,"You are running the latest version of Qween")
            stop
        
        QweenSend(player, "Updating...")

        delete file "plugins/Skript/scripts/Qween.sk"
        download file from {_link} to file "plugins/Skript/scripts/Qween.sk"
        reload script "Qween"

        QweenSend(player, "Done...")
        
command /qween [<string>]:
    trigger:
        if player is op:
            QweenSend(player,"<tooltip:Click!><open url:https://discord.gg/yuZEp7vJ2n>The server is running Qween! Start installing packages with /package-install or join the discord by clicking &bhere")
        else:
            QweenSend(player,"<tooltip:Click!><open url:https://discord.gg/yuZEp7vJ2n>The server is running Qween (by flowwave)! You must be an operator on this server to anything with it though!")

function QweenSend(p:player,m:string):
    send formatted "<##9E97FF>[Qween] &8| &f%{_m}%" to {_p}

command /sk [<string>]:
    permission: admin
    trigger:
        if arg 1 contains "enable" or "disable" or "help" or "update" or "info":
            ReloadScript(arg 1)
            stop
        set {_script} to arg 1
        replace all "reload " with "" in {_script}

        if loaded scripts contains {_script}:
            ReloadScript(arg 1)
        else:
            ReloadScript(arg 1)


function ReloadScript(sk:string):
    loop all players:
        if loop-player is op:
            add loop-player to {_ops::*}
    set {_sizeOld} to line count of file "logs/latest.log"

    send "<##FF6D9E>[Skript] &8| &fReloading &e%{_sk}%&f..." to {_ops::*}
    set {_now} to now
    command "skript reload %{_sk}%"
    set {_sizeNew} to line count of file "logs/latest.log"
    set {_lookbackCount} to min({_sizeNew} - {_sizeOld},  30)
    set {_warnCol} to "<##FF9456> "
    set {_errorCol} to "<##DD2340> "
    send " " to {_ops::*}

    loop {_lookbackCount} times:
        set {_c} to {_sizeNew} + (loop-number - {_lookbackCount})
        set {_line} to line floor({_c}) in file "logs/latest.log"
        if {_line} contains "Error" or "Warn":
            set {_errorS::*} to {_line} split at "]: "
            set {_error::*} to {_errorS::2} split at " ("
            set {_error} to {_error::1}
            if {_error} contains "Empty Configuration section! You might want to":
                set {_error} to "Empty configuration section! expected an indent"
            if {_error} contains "[Skript] Encountered":
                continue
            set {_s::*} to {_line} split at "sk, line "
            set {_split::*} to last element of {_s::*} split at ":"
            
            set {_lineNumber} to {_split::1} parsed as number 

            if {_line} contains "Error":
                set {_col} to {_errorCol}
                add 1 to {_errors}
            else:
                set {_col} to {_warnCol}
                add 1 to {_warns}

            set {_url} to "https://duckduckgo.com/?t=ffab&q=Skript+%{_error}%"
            replace all " " with "+" in {_url}
            if {simpleError}:
                send formatted "<tooltip:Click to search>%{_line}%" to {_ops::*}
 
                
            if {_lineNumber} is not set:
                send formatted "<tooltip:Click to search><url:%{_url}%>%{_col}%Other&8 | &f%{_error}%" to {_ops::*}
 
            else:
                send formatted "<tooltip:Click to search><url:%{_url}%>%{_col}%Line %{_lineNumber}%&8 | &f%{_error}%" to {_ops::*}
 
            add 1 to {_error}
    if {_errors} + {_warns} is not 0:
        send " " to {_ops::*}

    send "<##FF6D9E>[Skript] &8| &fFinished reloading in %difference between now and {_now}%!" to {_ops::*}

    set {_sound} to "entity.cat.ambient"
    set {_pitch} to 1.6
    
    if {_warns} > 0:
        set {_sound} to "entity.cat.ambient"
        set {_pitch} to 1
    if {_errors} > 0:
        set {_sound} to "entity.wither.hurt"

    loop {_ops::*}:
        play sound {_sound} with pitch {_pitch} to loop-value
    

on tab complete of "/sk":
    set {_scripts::*} to loaded scripts 
    loop {_scripts::*}:
        if loop-value contains "Packages/":
            remove loop-value from {_scripts::*}
    set tab completions for position 1 to {_scripts::*}

on tab complete of "/package-install":
    set tab completions for position 1 to {PackageName::*}

on tab complete of "/package-uninstall":
    loop files in dir "plugins\Skript\scripts\Packages":
        set {_x::*} to loop-value split at "\"
        set {_str} to last element of {_x::*}
        replace all ".sk" with "" in {_str}
        add {_str} to {_packages::*}
        delete {_x::*}
    set tab completions for position 1 to {_packages::*}
