function SnapFloor(x:number,snap:number=1) :: number:
    return floor({_x}/{_snap})*{_snap}
function Snap(x:number,snap:number=1) :: number:
    return round({_x}/{_snap})*{_snap}
function SnapCeil(x:number,snap:number=1) :: number:
    return ceil({_x}/{_snap})*{_snap}


function Clamp(x:number,min:number=0,max:number=1) :: number:
    if {_x} is more than {_max}:
        return {_max}
    if {_x} is less than {_min}:
        return {_min}
    
    return {_x}

function GetTimer(seconds:number) :: string:
    set {_minutes} to floor({_seconds}/60)
    set {_seconds} to Wrap({_seconds},0,59)
    
    set {_mins} to "%{_minutes}%"
    set {_mins::*} to {_mins} split at ""
            
    if size of {_mins::*} is less than 3:
        set {_mins} to "0%{_mins}%"
    
    set {_sec} to "%{_seconds}%" 
    set {_sec::*} to {_sec} split at ""
    
    if size of {_sec::*} is less than 3:
        set {_sec} to "0%{_sec}%"
    set {_timer} to "%{_mins}%:%{_sec}%"
    return {_timer}
    
function Wrap(x:number,min:number=0,max:number=1) :: number:
    if Between({_x},{_min},{_max}):
        return {_x}
    set {_delta} to {_max} - {_min}
    if {_x} < {_min}:
        return {_x} - SnapFloor({_x},{_delta}) + {_delta}
    if {_x} > {_min}:
        return {_x} - SnapCeil({_x},{_delta}) + {_delta}
    return {_x}

function Between(x:number,min:number=0,max:number=1) :: boolean:
    if {_x} > {_min}:
        if {_x} < {_max}:
            return true
    return false
function BetweenInclude(x:number,min:number=0,max:number=1) :: boolean:
    if {_x} >= {_min}:
        if {_x} <= {_max}:
            return true
    return false
function BetweenIncludeMin(x:number,min:number=0,max:number=1) :: boolean:
    if {_x} >= {_min}:
        if {_x} < {_max}:
            return true
    return false
function BetweenIncludeMax(x:number,min:number=0,max:number=1) :: boolean:
    if {_x} > {_min}:
        if {_x} <= {_max}:
            return true
    return false


function StringChoose(bool:boolean,f:string="",t:string="&f") :: string:
    if {_bool}:
        return {_t}
    return {_f}

function Vector(x:number,y:number,z:number) :: vector:
    return vector {_x},{_y},{_z}

function MultipleS(n:number) :: string:
    if {_n} is not 1:
        return "s"
    return ""

function NumberPlace(n:number) :: string:
    set {_n} to "%{_n}%"
    set {_n::*} to {_n} split at ""
    if last element of {_n::*} is "1":
        if {_n} is not "11":
            return "%{_n}%st"
    if last element of {_n::*} is "3":
        return "%{_n}%rd"
    
    return "%{_n}%th"

function RandI(min:number=0,max:number=100) :: number:
    return a random integer between {_min} and {_max}

function RandF(min:number=0,max:number=1) :: number:
    return a random number between {_min} and {_max}



function RayCastStep(l:location,n:number) :: location:
    add sin(pitch of {_l})*-1*{_n} to y-pos of {_l}
    set {_dY} to abs(cos(pitch of {_l}))*{_n}
    add sin(yaw of {_l})*-1*{_dY} to x-pos of {_l}
    add cos(yaw of {_l})*{_dY} to z-pos of {_l}
    
    return {_l}

function RayCastDelta(l:location,n:number) :: location:
    set y-pos of {_l} to  sin(pitch of {_l})*-1*{_n} 
    set {_dY} to abs(cos(pitch of {_l}))*{_n}
    set x-pos of {_l} to  sin(yaw of {_l})*-1*{_dY}
    set z-pos of {_l} to  cos(yaw of {_l})*{_dY} 
    
    return {_l}


aliases:
    unsolid = sign, fence, chain, coral, iron bars, moving piston
    
function RayCastCollide(l:location,step:number=0.25,max:number=100,preciseness:number=10) :: location:
    while true:
        remove 1 from {_max}
        if {_max} <= 0:
            return {_l}
        set {_newL} to RayCastStep({_l},{_step})

        if PointCollide({_newL}):
            remove 1 from {_preciseness}
            add 1 to {_max}
            if {_preciseness} < 0:
                broadcast "hit"
                return {_l}

            set {_step} to {_step}/2
        else:
            set {_l} to {_newL}

function PointCollide(l:location) :: boolean:
    if block at {_l} is unsolid:
        return false
    if block at {_l} is azalea or flowering azalea:
        if Wrap(y-pos of {_l}) > 0.5:
            return true 
    if block at {_l} is carpet:
        if Wrap(y-pos of {_l}) < 0.0625:
            return true 
    
    if block at {_l} is a slab:
        set {_str} to "%block at {_l}%"
        if {_str} contains "double":
            return true
        if {_str} contains "top":
            if Wrap(y-pos of {_l}) > 0.5:
                return true
        else:
            if Wrap(y-pos of {_l}) < 0.5:
                return true
    else:
        if block at {_l} is solid:
            return true
    
    return false

function StringRepeat(amount:number,string:string="|") :: string:
    set {_s} to ""
    loop {_amount} times:
        set {_s} to "%{_s}%%{_string}%"
    return {_s}

function StringRepeatSplit(amount:number,max:number=100,stringBefore:string="|",stringAfter:string="&8|") :: string:
    set {_s} to ""
    loop {_max} times:
        if {_amount} < loop-number:
            set {_s} to "%{_s}%%{_stringAfter}%"
        else:
            set {_s} to "%{_s}%%{_stringBefore}%"
    return {_s}

function Countdown(list:string,amount:number=1,minimum:number=0):
    loop {%{_list}%::*}:
        remove 1 from {%{_list}%::%loop-index%}
        if {%{_list}%::%loop-index%} <= {_minimum}:
            delete {%{_list}%::%loop-index%}


function CountdownActionbar(list:string,minimum:number=0,string:string="|"):
    loop {%{_list}%::*}:
        remove 1 from {%{_list}%::%loop-index%}
        if {%{_list}%::%loop-index%} <= {_minimum}:
            delete {%{_list}%::%loop-index%}
        send action bar StringRepeat({%{_list}%::%loop-index%},{_string}) to loop-index parsed as player

function CountdownActionbarSplit(list:string,minimum:number=0,max:number=100,stringBefore:string="|",stringAfter:string="&8|",reverse:boolean=true) :: players:
    loop {%{_list}%::*}:
        remove 1 from {%{_list}%::%loop-index%}
        if {%{_list}%::%loop-index%} <= {_minimum}:
            delete {%{_list}%::%loop-index%}
            add loop-index parsed as offline player to {_return::*}
        if {_reverse}:
            send action bar StringRepeatSplit({_max} - {%{_list}%::%loop-index%},{_max},{_stringBefore},{_stringAfter}) to loop-index parsed as offline player
        else:
            send action bar StringRepeatSplit({%{_list}%::%loop-index%}+0,{_max},{_stringBefore},{_stringAfter}) to loop-index parsed as offline player
    return {_return::*}

# SHOULD BE USED VERY LITTLE
function RunAt(loc:location,cmd:string):
    command "execute positioned %x-pos of {_loc}% %y-pos of {_loc}% %z-pos of {_loc}% run %{_cmd}%"


function Print(o:object):
    loop all players:
        if loop-player is op:
            send formatted "&c[Print] &8| &f<suggest command:%{_o}%>%{_o}%" to all players
