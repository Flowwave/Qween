#
# Custom cases below
#

function SilkyDemo():
    set {!item} to stick 
    set {!run} to "damage player by 3"
    # set {!run} to "/say hello"

function CustomCase(player:player,case:string,olditem:item,slot:number,count:number) :: item:
    set {_item} to stone
    
    delete {!item}
    delete {!run}
    
    evaluate {_case} 
    set {_item} to {!item}
    set {_run} to {!run}

    add "{run:""<!RUN!>%{_run}%<!RUN!>""}" to nbt of {_item}
    return {_item}

#
#
# I don't recommend touching the thingies below
# 
#

# An updated silkymenus!

command /sm [<string>] [<string>] [<string>]:
    permission: admin
    aliases: silkymenu, silky, menu
    trigger:
        if arg 1 is "list":
            if {menu.name::*} is not set:
                SilkyError(player,"You haven't made any menus yet! &7Use /menu edit <menu id> to make one")
                stop
            SilkySet(player,"Here's all the menus!")
            loop {menu.name::*}:
                message "&7 Name: ""%loop-value%"" ID: %loop-index%"

        if arg 1 is "edit" or "create":
            if arg 2 is set:
                SilkySet(player,"Editing menu &b%arg 2%")
                MenuEdit(player,arg 2)
                stop
            SilkyError(player,"Incorrect usage! &7/sm edit <menu id>")
            stop

        if arg 1 is "open":
            if arg 2 is set:
                SilkySet(player,"Opening menu &b%arg 2%")
                MenuOpen(player,arg 2)
                stop
            SilkyError(player,"Incorrect usage! &7/sm open <menu id>")
            stop

        if arg 1 is "rows":
            if arg 2 is set:
                if arg 3 is set:
                    set {_int} to arg 3 parsed as integer
                    if {_int} is 1 or 2 or 3 or 4 or 5 or 6:
                        set {menu.rows::%arg 2%} to {_int}
                        SilkySet(player,"Menu rows updated!")
                        stop
                    SilkyError(player,"Not a valid number! Use 1 to 6!")
                    stop
                SilkyError(player,"Incorrect usage! &7/sm rows <menu id> <rows>")
                stop
            SilkyError(player,"Incorrect usage! &7/sm rows <menu id> <rows>")
            stop

        if arg 1 is "name":
            if arg 2 is set:
                if arg 3 is set:
                    set {_name} to arg 3
                    set {menu.name::%arg 2%} to {_name}
                    SilkySet(player,"Menu display name set to %{_name}%!")
                    stop
                
                SilkyError(player,"Incorrect usage! &7/sm name <menu id> <display name>")
                stop
            SilkyError(player,"Incorrect usage! &7/sm name <menu id> <display name>")
            stop

        if arg 1 is set:
            SilkyError(player,"Unknown sub-command, Use /sm for the list!")
            stop
        
        message "&7 /sm edit <menu id>"
        message "&7 /sm open <menu id> (Opens a menu, for quick testing)"
        message "&7 /sm list (Lists all menus)"
        message "&7 /openmenu <player> <menu id> (Opens a menu to a certain player)"
        
        message "&7 /sm rows <menu id> <rows> (Change the number of rows of a menu)"
        message "&7 /sm name <menu id> <display name> (Change the display name of a menu)"

        message "&7 /setcmd (Set the click command for an item)"
        message "&7 /setcustomcase (Set the custom case ID for an item)"
        

on tab complete of "/menu":
    set tab completions for position 1 to "edit","open","list","rows","name"
    if event-string contains "list":
        stop

    loop {menu.name::*}:
        add loop-index to {_completions::*}
    set tab completions for position 2 to {_completions::*}

command /openmenu <player> <string>:
    permission: admin 
    trigger:
        MenuOpen(arg 1,arg 2)


on inventory close:
    if {menuEdit::%player%} is set:
        delete {menuEdit::%player%}
        SilkySet(player,"Menu edit succesful!")

    if {menuOpen::%player%} is set:
        delete {menuOpen::%player%}


on every tick:
    loop all players:
        if {menuEdit::%loop-player%} is set:
            if name of loop-player's current inventory is "[Editing]":
                set {_m} to {menuEdit::%loop-player%}


                loop 9*{menu.rows::%{_m}%} times:
                    set {_n} to -1 + loop-number
                    set {_item} to slot {_n} of loop-player's current inventory
                    if {menuData.%{_m}%::%{_n}%} is not {_item}:
                        set {menuData.%{_m}%::%{_n}%} to {_item}
                        play sound "block.note_block.chime" at pitch loop-number / (9*3) to loop-player

on inventory click:
    if {menuOpen::%player%} is set:
        
        set {_m} to {menuOpen::%player%}
        cancel event
        set {_player} to player
        set {_cmd} to nbt of clicked slot
        set {_run::*} to {_cmd} split at "<!RUN!>"
        set {_run} to {_run::2}
        
        if {_run} contains "/":
            replace all "/" with "" in {_run}
            command {_run}
        else:
            evaluate {_run}
        

function MenuEdit(p:player,m:string):
    set {menuEdit::%{_p}%} to {_m}
    menu_define({_m})
        
    open_chest({_p} , "[Editing]", {menu.rows::%{_m}%})
    loop 9*{menu.rows::%{_m}%} times:
        set {_n} to loop-number - 1
        set slot {_n} of {_p}'s current inventory to {menuData.%{_m}%::%{_n}%}


function MenuOpen(p:player,m:string):
    menu_define({_m})
    if {menuOpen::%{_p}%} is not set:
        open_chest({_p} , {menu.name::%{_m}%}, {menu.rows::%{_m}%})
    set {menuOpen::%{_p}%} to {_m}
    loop 9*{menu.rows::%{_m}%} times:
        set {_n} to loop-number - 1
        set {_i} to {menuData.%{_m}%::%{_n}%}
        
        if nbt of {_i} contains "<!CASE!>":
            set {_c::*} to nbt of {_i} split at "<!CASE!>"
            set {_case} to {_c::2}
            add 1 to {_count::%{_case}%}
            set {_i} to CustomCase({_p},{_case},{_i},{_n},{_count::%{_case}%})
        set slot {_n} of {_p}'s current inventory to {_i}
        

function menu_define(m:string):
    if {menu.name::%{_m}%} is not set:
        set {menu.rows::%{_m}%} to 3
        set {menu.name::%{_m}%} to {_m}
        

command /setcmd <string>:
    permission: admin
    trigger:
        add "{runCmd:""<!RUN!>%arg 1%<!RUN!>""}" to nbt of player's held item
        message "&eTip: use / for commands, without a / it will be seen as skript code"

command /setcustomcase <string>:
    permission: admin
    trigger:
        add "{customCase:""<!CASE!>%arg 1%<!CASE!>""}" to nbt of player's held item
        set name of player's held item to "&3[%arg 1%]"

#function renames

function open_chest(p:player,n:string,r:number):
    open chest with {_r} rows named {_n} to {_p}

function SilkySet(p:player,s:string):
    message "&a[SilkyMenus] &8| &f%{_s}%" to {_p}

function replace(inStr:string,replaceStr:string,endStr:string) :: string:
    replace all {_replaceStr} with {_endStr} in {_inStr}
    return {_inStr}

function split(inStr:string,splitStr:string) :: objects:
    set {_l::*} to {_inStr} split at {_splitStr}
    return {_l::*}

function SilkyError(p:player,m:string):
    message "&c[Silkymenus] &8| %{_m}%" to {_p}
